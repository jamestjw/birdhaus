orbs:
  discord: teka23/discord@0.0.1
version: 2.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  static-code-analysis:
    docker:
      - image: circleci/openjdk:8-jdk
    working_directory: ~/repo

    environment:
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx3200m
      TERM: dumb
    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: gradle dependencies

      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "build.gradle" }}

      # run tests!
      - run: gradle check
  run-junit-test-suite:
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
    docker:
      # specify the version you desire here
      - image: circleci/openjdk:8-jdk

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    environment:
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx3200m
      TERM: dumb
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      # Send notification to Discord about the start of the job
      - discord/notify:
          color: '4383476'
          message: 'Pipeline execution starting\nBranch: **${CIRCLE_BRANCH}**\nJob: **${CIRCLE_JOB}**\nUser: **${CIRCLE_PR_USERNAME:-${CIRCLE_USERNAME}}**\n'

      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: gradle dependencies

      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "build.gradle" }}

      # run tests!
      - run: gradle test

      # Send notification to discord about the status of the workflow.
      - discord/status
  run-gametest:
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
    docker:
      # specify the version you desire here
      - image: circleci/openjdk:8-jdk

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    environment:
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx3800m
      TERM: dumb
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: gradle dependencies

      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "build.gradle" }}

      - run:
          name: "Generate resources"
          command: gradle runData || true

      - run:
          name: "Run Integration Tests"
          command: gradle runGameTestServer

      # Send notification to discord about the status of the workflow.
      - discord/status
  build:
    docker:
      - image: circleci/openjdk:8-jdk
    working_directory: ~/repo

    environment:
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx3200m
      TERM: dumb
    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: gradle dependencies

      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "build.gradle" }}

      - run:
          name: "Build JAR file"
          command: gradle build

      - run:
          name: "Move JAR to ./artifacts"
          command: |
            mkdir -p artifacts
            cp ./build/libs/*.jar ./artifacts/
      - run:
          name: "Save tag number for deployment phase"
          command: |
            TAG_STR=$(git describe --all $(git rev-parse HEAD))
            TAG=$(echo $TAG_STR | perl -ne 'print "$1" if /tags\/(v\d+.\d+.\d+)/')
            echo -n $TAG > ./artifacts/tag.txt
      - persist_to_workspace:
          root: ~/repo
          paths:
            - artifacts
  publish-github-release:
    docker:
      - image: cibuilds/github:0.10
    working_directory: ~/repo
    steps:
      - attach_workspace:
          at: ~/repo
      - run:
          name: "Upload JAR to Github release"
          command: |
            if [ -s artifacts/tag.txt ]; then
              TAG=$(cat artifacts/tag.txt)
              ghr -t ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -replace ${TAG} ./artifacts/*.jar;
            fi
workflows:
  version: 2.1
  checks:
    jobs:
      - run-junit-test-suite
      - run-gametest
      - static-code-analysis
  build_and_deploy:
    jobs:
      - build:
          filters:
            tags:
              only: /^v\d+\.\d+\.\d+$/
            branches:
              ignore: /.*/
      - publish-github-release:
          requires:
            - build
          filters:
            tags:
              only: /^v\d+\.\d+\.\d+$/
            branches:
              ignore: /.*/
            